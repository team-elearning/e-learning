# Generated by Django 5.2.5 on 2025-10-14 00:49

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_personalization', '0001_initial'),
        ('content', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentSkill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('skill', models.CharField(db_index=True, help_text="Skill identifier (e.g., 'math:fractions:add')", max_length=128)),
                ('weight', models.FloatField(default=1.0, help_text='Importance of skill in this lesson (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='LearningEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('event_type', models.CharField(choices=[('start', 'Started'), ('submit', 'Submitted Answer'), ('hint', 'Used Hint'), ('skip', 'Skipped'), ('complete', 'Completed'), ('pause', 'Paused'), ('resume', 'Resumed')], db_index=True, max_length=64)),
                ('detail', models.JSONField(default=dict, help_text='Event metadata: correct, attempts, time_spent, etc.')),
                ('session_id', models.UUIDField(blank=True, db_index=True, null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MLModelVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('version', models.CharField(max_length=32)),
                ('model_type', models.CharField(choices=[('hlr', 'Half-Life Regression'), ('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('neural', 'Neural Network')], max_length=64)),
                ('parameters', models.JSONField(default=dict)),
                ('metrics', models.JSONField(default=dict, help_text='Performance metrics: MAE, AUC, precision, recall')),
                ('is_active', models.BooleanField(default=False)),
                ('deployed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PersonalizationRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.TextField()),
                ('condition', models.JSONField(help_text="Rule conditions as JSON (e.g., {'mastery_below': 0.5})")),
                ('action', models.JSONField(help_text="Action to take (e.g., {'recommend_skill': 'fractions:basics'})")),
                ('priority', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('reason', models.TextField(blank=True)),
                ('source', models.CharField(choices=[('rule', 'Rule-based'), ('model', 'ML Model'), ('manual', 'Manual Override'), ('collaborative', 'Collaborative Filtering'), ('content', 'Content-based')], default='rule', max_length=32)),
                ('shown_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('acted_at', models.DateTimeField(blank=True, null=True)),
                ('accepted', models.BooleanField(null=True)),
                ('feedback', models.JSONField(default=dict, help_text='Outcome data: correct, attempts, time_spent')),
            ],
            options={
                'ordering': ['-shown_at'],
            },
        ),
        migrations.CreateModel(
            name='SkillPrerequisite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('skill', models.CharField(db_index=True, max_length=128)),
                ('prerequisite_skill', models.CharField(db_index=True, max_length=128)),
                ('strength', models.FloatField(default=1.0, help_text='Strength of prerequisite relationship (0=weak, 1=strong)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_group', models.CharField(blank=True, choices=[('6-8', '6-8 years'), ('9-11', '9-11 years'), ('12-14', '12-14 years')], max_length=32, null=True)),
                ('learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('mixed', 'Mixed')], default='mixed', max_length=32)),
                ('difficulty_preference', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('adaptive', 'Adaptive')], default='adaptive', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserSkillMastery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(db_index=True, max_length=128)),
                ('mastery', models.FloatField(default=0.0, help_text='Estimated mastery level (0=none, 1=mastered)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_update', models.DateTimeField(auto_now=True, db_index=True)),
                ('half_life_days', models.FloatField(default=1.0, help_text='Half-life in days for memory decay')),
                ('practice_count', models.IntegerField(default=0)),
                ('correct_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'User Skill Mastery',
                'verbose_name_plural': 'User Skill Masteries',
            },
        ),
        migrations.AlterModelOptions(
            name='recommendation',
            options={'ordering': ['-score', '-generated_at'], 'verbose_name': 'Recommendation', 'verbose_name_plural': 'Recommendations'},
        ),
        migrations.AlterField(
            model_name='learningpath',
            name='ai_model',
            field=models.CharField(blank=True, help_text="AI model used for generation (e.g., 'gpt-4', 'hlr-v1')", max_length=128, null=True),
        ),
        migrations.AlterField(
            model_name='learningpath',
            name='generated_at',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='learningpath',
            name='metadata',
            field=models.JSONField(default=dict, help_text='Additional context like weak_skills, difficulty_level'),
        ),
        migrations.AlterField(
            model_name='learningpath',
            name='path',
            field=models.JSONField(default=list, help_text='Ordered list of lesson steps with metadata'),
        ),
        migrations.AlterField(
            model_name='recommendation',
            name='generated_at',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='recommendation',
            name='reason',
            field=models.TextField(help_text='Human-readable explanation'),
        ),
        migrations.AlterField(
            model_name='recommendation',
            name='score',
            field=models.FloatField(help_text='Recommendation confidence score (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddIndex(
            model_name='learningpath',
            index=models.Index(fields=['student', 'course', '-generated_at'], name='ai_personal_student_8a4275_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['student', '-score'], name='ai_personal_student_f0651f_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['-generated_at'], name='ai_personal_generat_bf92d6_idx'),
        ),
        migrations.AddField(
            model_name='contentskill',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_skills', to='content.lesson'),
        ),
        migrations.AddField(
            model_name='learningevent',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.course'),
        ),
        migrations.AddField(
            model_name='learningevent',
            name='lesson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.lesson'),
        ),
        migrations.AddField(
            model_name='learningevent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='mlmodelversion',
            unique_together={('name', 'version')},
        ),
        migrations.AddField(
            model_name='recommendationlog',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.lesson'),
        ),
        migrations.AddField(
            model_name='recommendationlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='skillprerequisite',
            index=models.Index(fields=['skill'], name='ai_personal_skill_997064_idx'),
        ),
        migrations.AddIndex(
            model_name='skillprerequisite',
            index=models.Index(fields=['prerequisite_skill'], name='ai_personal_prerequ_e93410_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skillprerequisite',
            unique_together={('skill', 'prerequisite_skill')},
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personalization_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userskillmastery',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_masteries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='contentskill',
            index=models.Index(fields=['skill'], name='ai_personal_skill_7be8a8_idx'),
        ),
        migrations.AddIndex(
            model_name='contentskill',
            index=models.Index(fields=['lesson', 'skill'], name='ai_personal_lesson__5d74be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentskill',
            unique_together={('lesson', 'skill')},
        ),
        migrations.AddIndex(
            model_name='learningevent',
            index=models.Index(fields=['user', 'timestamp'], name='ai_personal_user_id_82c00d_idx'),
        ),
        migrations.AddIndex(
            model_name='learningevent',
            index=models.Index(fields=['lesson', 'timestamp'], name='ai_personal_lesson__da3c34_idx'),
        ),
        migrations.AddIndex(
            model_name='learningevent',
            index=models.Index(fields=['session_id'], name='ai_personal_session_f441e8_idx'),
        ),
        migrations.AddIndex(
            model_name='learningevent',
            index=models.Index(fields=['event_type', 'timestamp'], name='ai_personal_event_t_54014f_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationlog',
            index=models.Index(fields=['user', '-shown_at'], name='ai_personal_user_id_f172b5_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationlog',
            index=models.Index(fields=['source', '-shown_at'], name='ai_personal_source_ec35d8_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationlog',
            index=models.Index(fields=['accepted'], name='ai_personal_accepte_466374_idx'),
        ),
        migrations.AddIndex(
            model_name='userskillmastery',
            index=models.Index(fields=['user', 'skill'], name='ai_personal_user_id_073426_idx'),
        ),
        migrations.AddIndex(
            model_name='userskillmastery',
            index=models.Index(fields=['user', 'mastery'], name='ai_personal_user_id_ceb1f2_idx'),
        ),
        migrations.AddIndex(
            model_name='userskillmastery',
            index=models.Index(fields=['-last_update'], name='ai_personal_last_up_ac66cf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userskillmastery',
            unique_together={('user', 'skill')},
        ),
    ]
